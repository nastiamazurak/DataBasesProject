// <auto-generated />
using System;
using ElectionProject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ElectionProject.Migrations
{
    [DbContext(typeof(ElectionContext))]
    [Migration("20190509160111_InitMigration")]
    partial class InitMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ElectionProject.Appeal", b =>
                {
                    b.Property<int>("AppealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("appeal_id");

                    b.Property<int?>("CircuitId")
                        .HasColumnName("circuit_id");

                    b.Property<int>("CitizenId")
                        .HasColumnName("citizen_id");

                    b.Property<int?>("ElectionId")
                        .HasColumnName("election_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("text");

                    b.Property<int>("TypeId")
                        .HasColumnName("type_id");

                    b.HasKey("AppealId");

                    b.HasIndex("CircuitId");

                    b.HasIndex("CitizenId");

                    b.HasIndex("ElectionId");

                    b.HasIndex("TypeId");

                    b.ToTable("appeal");
                });

            modelBuilder.Entity("ElectionProject.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("candidate_id");

                    b.Property<int>("CitizenId")
                        .HasColumnName("citizen_id");

                    b.Property<int?>("ElectionId")
                        .HasColumnName("election_id");

                    b.Property<int>("Number")
                        .HasColumnName("number");

                    b.HasKey("CandidateId");

                    b.HasIndex("CitizenId");

                    b.HasIndex("ElectionId");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasName("candidate_number_key");

                    b.ToTable("candidate");
                });

            modelBuilder.Entity("ElectionProject.Circuit", b =>
                {
                    b.Property<int>("CircuitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("circuit_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnName("district_name")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Number")
                        .HasColumnName("number");

                    b.HasKey("CircuitId");

                    b.HasIndex("Address")
                        .IsUnique()
                        .HasName("circuit_address_key");

                    b.ToTable("circuit");
                });

            modelBuilder.Entity("ElectionProject.Citizen", b =>
                {
                    b.Property<int>("CitizenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("citizen_id");

                    b.Property<DateTime>("Birth")
                        .HasColumnName("birth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Ipn")
                        .IsRequired()
                        .HasColumnName("ipn")
                        .HasColumnType("character varying(12)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("surname")
                        .HasColumnType("character varying(30)");

                    b.HasKey("CitizenId");

                    b.HasIndex("Ipn")
                        .IsUnique()
                        .HasName("citizen_ipn_key");

                    b.ToTable("citizen");
                });

            modelBuilder.Entity("ElectionProject.Complaint", b =>
                {
                    b.Property<int>("ComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("complaint_id");

                    b.Property<int?>("CircuitId")
                        .HasColumnName("circuit_id");

                    b.Property<int?>("ElectionId")
                        .HasColumnName("election_id");

                    b.Property<int>("ObserverId")
                        .HasColumnName("observer_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("text");

                    b.Property<int>("TypeId")
                        .HasColumnName("type_id");

                    b.HasKey("ComplaintId");

                    b.HasIndex("CircuitId");

                    b.HasIndex("ElectionId");

                    b.HasIndex("ObserverId");

                    b.HasIndex("TypeId");

                    b.ToTable("complaint");
                });

            modelBuilder.Entity("ElectionProject.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("district_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Center")
                        .IsRequired()
                        .HasColumnName("center")
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CircuitId")
                        .HasColumnName("circuit_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Number")
                        .HasColumnName("number");

                    b.HasKey("DistrictId");

                    b.HasIndex("Address")
                        .IsUnique()
                        .HasName("district_address_key");

                    b.HasIndex("CircuitId");

                    b.ToTable("district");
                });

            modelBuilder.Entity("ElectionProject.Election", b =>
                {
                    b.Property<int>("ElectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("election_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<int>("HeadOfCvk")
                        .HasColumnName("head_of_cvk");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<int>("Tour")
                        .HasColumnName("tour");

                    b.Property<int>("Year")
                        .HasColumnName("year");

                    b.HasKey("ElectionId");

                    b.HasIndex("HeadOfCvk");

                    b.ToTable("election");
                });

            modelBuilder.Entity("ElectionProject.HeadCircuit", b =>
                {
                    b.Property<int>("HeadCircuitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("head_circuit_id");

                    b.Property<int?>("CircuitId")
                        .HasColumnName("circuit_id");

                    b.Property<int>("CitizenId")
                        .HasColumnName("citizen_id");

                    b.Property<int?>("ElectionId")
                        .HasColumnName("election_id");

                    b.HasKey("HeadCircuitId");

                    b.HasIndex("CircuitId");

                    b.HasIndex("CitizenId");

                    b.HasIndex("ElectionId");

                    b.ToTable("head_circuit");
                });

            modelBuilder.Entity("ElectionProject.HeadDistrict", b =>
                {
                    b.Property<int>("HeadDistrict1")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("head_district");

                    b.Property<int>("CitizenId")
                        .HasColumnName("citizen_id");

                    b.Property<int?>("DistrictId")
                        .HasColumnName("district_id");

                    b.Property<int?>("ElectionId")
                        .HasColumnName("election_id");

                    b.HasKey("HeadDistrict1");

                    b.HasIndex("CitizenId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ElectionId");

                    b.ToTable("head_district");
                });

            modelBuilder.Entity("ElectionProject.Observer", b =>
                {
                    b.Property<int>("ObserverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("observer_id");

                    b.Property<int>("CandidateId")
                        .HasColumnName("candidate_id");

                    b.Property<int?>("CircuitId")
                        .HasColumnName("circuit_id");

                    b.Property<int>("CitizenId")
                        .HasColumnName("citizen_id");

                    b.Property<int?>("ElectionId")
                        .HasColumnName("election_id");

                    b.HasKey("ObserverId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("CircuitId");

                    b.HasIndex("CitizenId");

                    b.HasIndex("ElectionId");

                    b.ToTable("observer");
                });

            modelBuilder.Entity("ElectionProject.Type", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(30)");

                    b.HasKey("TypeId");

                    b.ToTable("type");
                });

            modelBuilder.Entity("ElectionProject.Vote", b =>
                {
                    b.Property<int>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vote_id");

                    b.Property<int>("CandidateId")
                        .HasColumnName("candidate_id");

                    b.Property<int?>("CircuitId")
                        .HasColumnName("circuit_id");

                    b.Property<int>("CitizenId")
                        .HasColumnName("citizen_id");

                    b.Property<int?>("ElectionId")
                        .HasColumnName("election_id");

                    b.HasKey("VoteId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("CircuitId");

                    b.HasIndex("CitizenId")
                        .IsUnique()
                        .HasName("vote_citizen_id_key");

                    b.HasIndex("ElectionId");

                    b.ToTable("vote");
                });

            modelBuilder.Entity("ElectionProject.Appeal", b =>
                {
                    b.HasOne("ElectionProject.Circuit", "Circuit")
                        .WithMany("Appeal")
                        .HasForeignKey("CircuitId")
                        .HasConstraintName("appeal_circuit_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElectionProject.Citizen", "Citizen")
                        .WithMany("Appeal")
                        .HasForeignKey("CitizenId")
                        .HasConstraintName("appeal_citizen_id_fkey");

                    b.HasOne("ElectionProject.Election", "Election")
                        .WithMany("Appeal")
                        .HasForeignKey("ElectionId")
                        .HasConstraintName("appeal_election_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElectionProject.Type", "Type")
                        .WithMany("Appeal")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("appeal_type_id_fkey");
                });

            modelBuilder.Entity("ElectionProject.Candidate", b =>
                {
                    b.HasOne("ElectionProject.Citizen", "Citizen")
                        .WithMany("Candidate")
                        .HasForeignKey("CitizenId")
                        .HasConstraintName("candidate_citizen_id_fkey");

                    b.HasOne("ElectionProject.Election", "Election")
                        .WithMany("Candidate")
                        .HasForeignKey("ElectionId")
                        .HasConstraintName("candidate_election_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ElectionProject.Complaint", b =>
                {
                    b.HasOne("ElectionProject.Circuit", "Circuit")
                        .WithMany("Complaint")
                        .HasForeignKey("CircuitId")
                        .HasConstraintName("complaint_circuit_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElectionProject.Election", "Election")
                        .WithMany("Complaint")
                        .HasForeignKey("ElectionId")
                        .HasConstraintName("complaint_election_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElectionProject.Observer", "Observer")
                        .WithMany("Complaint")
                        .HasForeignKey("ObserverId")
                        .HasConstraintName("complaint_observer_id_fkey");

                    b.HasOne("ElectionProject.Type", "Type")
                        .WithMany("Complaint")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("complaint_type_id_fkey");
                });

            modelBuilder.Entity("ElectionProject.District", b =>
                {
                    b.HasOne("ElectionProject.Circuit", "Circuit")
                        .WithMany("District")
                        .HasForeignKey("CircuitId")
                        .HasConstraintName("district_circuit_id_fkey");
                });

            modelBuilder.Entity("ElectionProject.Election", b =>
                {
                    b.HasOne("ElectionProject.Citizen", "HeadOfCvkNavigation")
                        .WithMany("Election")
                        .HasForeignKey("HeadOfCvk")
                        .HasConstraintName("election_head_of_cvk_fkey");
                });

            modelBuilder.Entity("ElectionProject.HeadCircuit", b =>
                {
                    b.HasOne("ElectionProject.Circuit", "Circuit")
                        .WithMany("HeadCircuit")
                        .HasForeignKey("CircuitId")
                        .HasConstraintName("head_circuit_circuit_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElectionProject.Citizen", "Citizen")
                        .WithMany("HeadCircuit")
                        .HasForeignKey("CitizenId")
                        .HasConstraintName("head_circuit_citizen_id_fkey");

                    b.HasOne("ElectionProject.Election", "Election")
                        .WithMany("HeadCircuit")
                        .HasForeignKey("ElectionId")
                        .HasConstraintName("head_circuit_election_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ElectionProject.HeadDistrict", b =>
                {
                    b.HasOne("ElectionProject.Citizen", "Citizen")
                        .WithMany("HeadDistrict")
                        .HasForeignKey("CitizenId")
                        .HasConstraintName("head_district_citizen_id_fkey");

                    b.HasOne("ElectionProject.District", "District")
                        .WithMany("HeadDistrict")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("head_district_district_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElectionProject.Election", "Election")
                        .WithMany("HeadDistrict")
                        .HasForeignKey("ElectionId")
                        .HasConstraintName("head_district_election_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ElectionProject.Observer", b =>
                {
                    b.HasOne("ElectionProject.Candidate", "Candidate")
                        .WithMany("Observer")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("observer_candidate_id_fkey");

                    b.HasOne("ElectionProject.Circuit", "Circuit")
                        .WithMany("Observer")
                        .HasForeignKey("CircuitId")
                        .HasConstraintName("observer_circuit_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElectionProject.Citizen", "Citizen")
                        .WithMany("Observer")
                        .HasForeignKey("CitizenId")
                        .HasConstraintName("observer_citizen_id_fkey");

                    b.HasOne("ElectionProject.Election", "Election")
                        .WithMany("Observer")
                        .HasForeignKey("ElectionId")
                        .HasConstraintName("observer_election_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ElectionProject.Vote", b =>
                {
                    b.HasOne("ElectionProject.Candidate", "Candidate")
                        .WithMany("Vote")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("vote_candidate_id_fkey");

                    b.HasOne("ElectionProject.Circuit", "Circuit")
                        .WithMany("Vote")
                        .HasForeignKey("CircuitId")
                        .HasConstraintName("vote_circuit_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElectionProject.Citizen", "Citizen")
                        .WithOne("Vote")
                        .HasForeignKey("ElectionProject.Vote", "CitizenId")
                        .HasConstraintName("vote_citizen_id_fkey");

                    b.HasOne("ElectionProject.Election", "Election")
                        .WithMany("Vote")
                        .HasForeignKey("ElectionId")
                        .HasConstraintName("vote_election_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
